// Mocks generated by Mockito 5.4.4 from annotations
// in trainit/test/data/repository/account_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i7;
import 'dart:io' as _i5;
import 'dart:typed_data' as _i9;

import 'package:firebase_auth/firebase_auth.dart' as _i3;
import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;
import 'package:shared_preferences/shared_preferences.dart' as _i21;
import 'package:trainit/data/data_provider/remote_authentication_provider.dart'
    as _i10;
import 'package:trainit/data/database.dart' as _i11;
import 'package:trainit/data/files.dart' as _i19;
import 'package:trainit/data/model/account.dart' as _i12;
import 'package:trainit/data/model/body_value.dart' as _i17;
import 'package:trainit/data/model/calendar.dart' as _i13;
import 'package:trainit/data/model/friendship.dart' as _i18;
import 'package:trainit/data/model/goal.dart' as _i16;
import 'package:trainit/data/model/personal_record.dart' as _i15;
import 'package:trainit/data/model/training_plan.dart' as _i14;
import 'package:trainit/data/shared_preferences.dart' as _i20;
import 'package:trainit/objectbox.g.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserCredential_2 extends _i1.SmartFake
    implements _i3.UserCredential {
  _FakeUserCredential_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeBox_3<T> extends _i1.SmartFake implements _i4.Box<T> {
  _FakeBox_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFile_4 extends _i1.SmartFake implements _i5.File {
  _FakeFile_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUri_5 extends _i1.SmartFake implements Uri {
  _FakeUri_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDirectory_6 extends _i1.SmartFake implements _i5.Directory {
  _FakeDirectory_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileSystemEntity_7 extends _i1.SmartFake
    implements _i5.FileSystemEntity {
  _FakeFileSystemEntity_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_8 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeRandomAccessFile_9 extends _i1.SmartFake
    implements _i5.RandomAccessFile {
  _FakeRandomAccessFile_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIOSink_10 extends _i1.SmartFake implements _i5.IOSink {
  _FakeIOSink_10(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFileStat_11 extends _i1.SmartFake implements _i5.FileStat {
  _FakeFileStat_11(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockClient extends _i1.Mock implements _i2.Client {
  MockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i7.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i2.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i9.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i6.Future<_i9.Uint8List>);

  @override
  _i6.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RemoteAuthenticationProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteAuthenticationProvider extends _i1.Mock
    implements _i10.RemoteAuthenticationProvider {
  MockRemoteAuthenticationProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSignedIn => (super.noSuchMethod(
        Invocation.getter(#isSignedIn),
        returnValue: false,
      ) as bool);

  @override
  bool get isVerified => (super.noSuchMethod(
        Invocation.getter(#isVerified),
        returnValue: false,
      ) as bool);

  @override
  _i6.Stream<_i3.User?> get userStream => (super.noSuchMethod(
        Invocation.getter(#userStream),
        returnValue: _i6.Stream<_i3.User?>.empty(),
      ) as _i6.Stream<_i3.User?>);

  @override
  _i6.Future<String?> getUserToken({bool? forceRefresh = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserToken,
          [],
          {#forceRefresh: forceRefresh},
        ),
        returnValue: _i6.Future<String?>.value(),
      ) as _i6.Future<String?>);

  @override
  _i6.Future<void> reloadUser() => (super.noSuchMethod(
        Invocation.method(
          #reloadUser,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateUserDisplayName(String? displayName) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUserDisplayName,
          [displayName],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> createUserWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createUserWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> signInWithEmailAndPassword(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithEmailAndPassword,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i3.UserCredential> signInWithCredentials(
          _i3.AuthCredential? credential) =>
      (super.noSuchMethod(
        Invocation.method(
          #signInWithCredentials,
          [credential],
        ),
        returnValue: _i6.Future<_i3.UserCredential>.value(_FakeUserCredential_2(
          this,
          Invocation.method(
            #signInWithCredentials,
            [credential],
          ),
        )),
      ) as _i6.Future<_i3.UserCredential>);

  @override
  _i6.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> sendEmailVerificationIfSignedIn() => (super.noSuchMethod(
        Invocation.method(
          #sendEmailVerificationIfSignedIn,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [LocalDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalDatabase extends _i1.Mock implements _i11.LocalDatabase {
  MockLocalDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Box<_i12.Account> get accountBox => (super.noSuchMethod(
        Invocation.getter(#accountBox),
        returnValue: _FakeBox_3<_i12.Account>(
          this,
          Invocation.getter(#accountBox),
        ),
      ) as _i4.Box<_i12.Account>);

  @override
  _i4.Box<_i13.WeekCalendar> get calendarBox => (super.noSuchMethod(
        Invocation.getter(#calendarBox),
        returnValue: _FakeBox_3<_i13.WeekCalendar>(
          this,
          Invocation.getter(#calendarBox),
        ),
      ) as _i4.Box<_i13.WeekCalendar>);

  @override
  _i4.Box<_i14.TrainingPlan> get trainingPlanBox => (super.noSuchMethod(
        Invocation.getter(#trainingPlanBox),
        returnValue: _FakeBox_3<_i14.TrainingPlan>(
          this,
          Invocation.getter(#trainingPlanBox),
        ),
      ) as _i4.Box<_i14.TrainingPlan>);

  @override
  _i4.Box<_i15.PersonalRecord> get personalRecordBox => (super.noSuchMethod(
        Invocation.getter(#personalRecordBox),
        returnValue: _FakeBox_3<_i15.PersonalRecord>(
          this,
          Invocation.getter(#personalRecordBox),
        ),
      ) as _i4.Box<_i15.PersonalRecord>);

  @override
  _i4.Box<_i16.Goal> get goalBox => (super.noSuchMethod(
        Invocation.getter(#goalBox),
        returnValue: _FakeBox_3<_i16.Goal>(
          this,
          Invocation.getter(#goalBox),
        ),
      ) as _i4.Box<_i16.Goal>);

  @override
  _i4.Box<_i17.BodyValue> get bodyValueBox => (super.noSuchMethod(
        Invocation.getter(#bodyValueBox),
        returnValue: _FakeBox_3<_i17.BodyValue>(
          this,
          Invocation.getter(#bodyValueBox),
        ),
      ) as _i4.Box<_i17.BodyValue>);

  @override
  _i4.Box<_i18.Friendship> get friendshipBox => (super.noSuchMethod(
        Invocation.getter(#friendshipBox),
        returnValue: _FakeBox_3<_i18.Friendship>(
          this,
          Invocation.getter(#friendshipBox),
        ),
      ) as _i4.Box<_i18.Friendship>);

  @override
  _i6.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [LocalFiles].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalFiles extends _i1.Mock implements _i19.LocalFiles {
  MockLocalFiles() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i5.File> getProfilePhotoFile() => (super.noSuchMethod(
        Invocation.method(
          #getProfilePhotoFile,
          [],
        ),
        returnValue: _i6.Future<_i5.File>.value(_FakeFile_4(
          this,
          Invocation.method(
            #getProfilePhotoFile,
            [],
          ),
        )),
      ) as _i6.Future<_i5.File>);

  @override
  _i6.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [KeyValueStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeyValueStorage extends _i1.Mock implements _i20.KeyValueStorage {
  MockKeyValueStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set preferences(_i21.SharedPreferences? _preferences) => super.noSuchMethod(
        Invocation.setter(
          #preferences,
          _preferences,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get theme => (super.noSuchMethod(
        Invocation.getter(#theme),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#theme),
        ),
      ) as String);

  @override
  set theme(String? value) => super.noSuchMethod(
        Invocation.setter(
          #theme,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get tutorialStatus => (super.noSuchMethod(
        Invocation.getter(#tutorialStatus),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#tutorialStatus),
        ),
      ) as String);

  @override
  set tutorialStatus(String? value) => super.noSuchMethod(
        Invocation.setter(
          #tutorialStatus,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> deleteAll() => (super.noSuchMethod(
        Invocation.method(
          #deleteAll,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);
}

/// A class which mocks [File].
///
/// See the documentation for Mockito's code generation for more information.
class MockFile extends _i1.Mock implements _i5.File {
  MockFile() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.File get absolute => (super.noSuchMethod(
        Invocation.getter(#absolute),
        returnValue: _FakeFile_4(
          this,
          Invocation.getter(#absolute),
        ),
      ) as _i5.File);

  @override
  String get path => (super.noSuchMethod(
        Invocation.getter(#path),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.getter(#path),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_5(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  bool get isAbsolute => (super.noSuchMethod(
        Invocation.getter(#isAbsolute),
        returnValue: false,
      ) as bool);

  @override
  _i5.Directory get parent => (super.noSuchMethod(
        Invocation.getter(#parent),
        returnValue: _FakeDirectory_6(
          this,
          Invocation.getter(#parent),
        ),
      ) as _i5.Directory);

  @override
  _i6.Future<_i5.File> create({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #create,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValue: _i6.Future<_i5.File>.value(_FakeFile_4(
          this,
          Invocation.method(
            #create,
            [],
            {
              #recursive: recursive,
              #exclusive: exclusive,
            },
          ),
        )),
      ) as _i6.Future<_i5.File>);

  @override
  void createSync({
    bool? recursive = false,
    bool? exclusive = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #createSync,
          [],
          {
            #recursive: recursive,
            #exclusive: exclusive,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i5.File> rename(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #rename,
          [newPath],
        ),
        returnValue: _i6.Future<_i5.File>.value(_FakeFile_4(
          this,
          Invocation.method(
            #rename,
            [newPath],
          ),
        )),
      ) as _i6.Future<_i5.File>);

  @override
  _i5.File renameSync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #renameSync,
          [newPath],
        ),
        returnValue: _FakeFile_4(
          this,
          Invocation.method(
            #renameSync,
            [newPath],
          ),
        ),
      ) as _i5.File);

  @override
  _i6.Future<_i5.FileSystemEntity> delete({bool? recursive = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [],
          {#recursive: recursive},
        ),
        returnValue:
            _i6.Future<_i5.FileSystemEntity>.value(_FakeFileSystemEntity_7(
          this,
          Invocation.method(
            #delete,
            [],
            {#recursive: recursive},
          ),
        )),
      ) as _i6.Future<_i5.FileSystemEntity>);

  @override
  void deleteSync({bool? recursive = false}) => super.noSuchMethod(
        Invocation.method(
          #deleteSync,
          [],
          {#recursive: recursive},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i5.File> copy(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [newPath],
        ),
        returnValue: _i6.Future<_i5.File>.value(_FakeFile_4(
          this,
          Invocation.method(
            #copy,
            [newPath],
          ),
        )),
      ) as _i6.Future<_i5.File>);

  @override
  _i5.File copySync(String? newPath) => (super.noSuchMethod(
        Invocation.method(
          #copySync,
          [newPath],
        ),
        returnValue: _FakeFile_4(
          this,
          Invocation.method(
            #copySync,
            [newPath],
          ),
        ),
      ) as _i5.File);

  @override
  _i6.Future<int> length() => (super.noSuchMethod(
        Invocation.method(
          #length,
          [],
        ),
        returnValue: _i6.Future<int>.value(0),
      ) as _i6.Future<int>);

  @override
  int lengthSync() => (super.noSuchMethod(
        Invocation.method(
          #lengthSync,
          [],
        ),
        returnValue: 0,
      ) as int);

  @override
  _i6.Future<DateTime> lastAccessed() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessed,
          [],
        ),
        returnValue: _i6.Future<DateTime>.value(_FakeDateTime_8(
          this,
          Invocation.method(
            #lastAccessed,
            [],
          ),
        )),
      ) as _i6.Future<DateTime>);

  @override
  DateTime lastAccessedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastAccessedSync,
          [],
        ),
        returnValue: _FakeDateTime_8(
          this,
          Invocation.method(
            #lastAccessedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i6.Future<dynamic> setLastAccessed(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastAccessed,
          [time],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  void setLastAccessedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastAccessedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<DateTime> lastModified() => (super.noSuchMethod(
        Invocation.method(
          #lastModified,
          [],
        ),
        returnValue: _i6.Future<DateTime>.value(_FakeDateTime_8(
          this,
          Invocation.method(
            #lastModified,
            [],
          ),
        )),
      ) as _i6.Future<DateTime>);

  @override
  DateTime lastModifiedSync() => (super.noSuchMethod(
        Invocation.method(
          #lastModifiedSync,
          [],
        ),
        returnValue: _FakeDateTime_8(
          this,
          Invocation.method(
            #lastModifiedSync,
            [],
          ),
        ),
      ) as DateTime);

  @override
  _i6.Future<dynamic> setLastModified(DateTime? time) => (super.noSuchMethod(
        Invocation.method(
          #setLastModified,
          [time],
        ),
        returnValue: _i6.Future<dynamic>.value(),
      ) as _i6.Future<dynamic>);

  @override
  void setLastModifiedSync(DateTime? time) => super.noSuchMethod(
        Invocation.method(
          #setLastModifiedSync,
          [time],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i5.RandomAccessFile> open(
          {_i5.FileMode? mode = _i5.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
          {#mode: mode},
        ),
        returnValue:
            _i6.Future<_i5.RandomAccessFile>.value(_FakeRandomAccessFile_9(
          this,
          Invocation.method(
            #open,
            [],
            {#mode: mode},
          ),
        )),
      ) as _i6.Future<_i5.RandomAccessFile>);

  @override
  _i5.RandomAccessFile openSync({_i5.FileMode? mode = _i5.FileMode.read}) =>
      (super.noSuchMethod(
        Invocation.method(
          #openSync,
          [],
          {#mode: mode},
        ),
        returnValue: _FakeRandomAccessFile_9(
          this,
          Invocation.method(
            #openSync,
            [],
            {#mode: mode},
          ),
        ),
      ) as _i5.RandomAccessFile);

  @override
  _i6.Stream<List<int>> openRead([
    int? start,
    int? end,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #openRead,
          [
            start,
            end,
          ],
        ),
        returnValue: _i6.Stream<List<int>>.empty(),
      ) as _i6.Stream<List<int>>);

  @override
  _i5.IOSink openWrite({
    _i5.FileMode? mode = _i5.FileMode.write,
    _i7.Encoding? encoding = const _i7.Utf8Codec(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #openWrite,
          [],
          {
            #mode: mode,
            #encoding: encoding,
          },
        ),
        returnValue: _FakeIOSink_10(
          this,
          Invocation.method(
            #openWrite,
            [],
            {
              #mode: mode,
              #encoding: encoding,
            },
          ),
        ),
      ) as _i5.IOSink);

  @override
  _i6.Future<_i9.Uint8List> readAsBytes() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytes,
          [],
        ),
        returnValue: _i6.Future<_i9.Uint8List>.value(_i9.Uint8List(0)),
      ) as _i6.Future<_i9.Uint8List>);

  @override
  _i9.Uint8List readAsBytesSync() => (super.noSuchMethod(
        Invocation.method(
          #readAsBytesSync,
          [],
        ),
        returnValue: _i9.Uint8List(0),
      ) as _i9.Uint8List);

  @override
  _i6.Future<String> readAsString(
          {_i7.Encoding? encoding = const _i7.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsString,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #readAsString,
            [],
            {#encoding: encoding},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  String readAsStringSync({_i7.Encoding? encoding = const _i7.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsStringSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #readAsStringSync,
            [],
            {#encoding: encoding},
          ),
        ),
      ) as String);

  @override
  _i6.Future<List<String>> readAsLines(
          {_i7.Encoding? encoding = const _i7.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLines,
          [],
          {#encoding: encoding},
        ),
        returnValue: _i6.Future<List<String>>.value(<String>[]),
      ) as _i6.Future<List<String>>);

  @override
  List<String> readAsLinesSync(
          {_i7.Encoding? encoding = const _i7.Utf8Codec()}) =>
      (super.noSuchMethod(
        Invocation.method(
          #readAsLinesSync,
          [],
          {#encoding: encoding},
        ),
        returnValue: <String>[],
      ) as List<String>);

  @override
  _i6.Future<_i5.File> writeAsBytes(
    List<int>? bytes, {
    _i5.FileMode? mode = _i5.FileMode.write,
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsBytes,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValue: _i6.Future<_i5.File>.value(_FakeFile_4(
          this,
          Invocation.method(
            #writeAsBytes,
            [bytes],
            {
              #mode: mode,
              #flush: flush,
            },
          ),
        )),
      ) as _i6.Future<_i5.File>);

  @override
  void writeAsBytesSync(
    List<int>? bytes, {
    _i5.FileMode? mode = _i5.FileMode.write,
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsBytesSync,
          [bytes],
          {
            #mode: mode,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<_i5.File> writeAsString(
    String? contents, {
    _i5.FileMode? mode = _i5.FileMode.write,
    _i7.Encoding? encoding = const _i7.Utf8Codec(),
    bool? flush = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #writeAsString,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValue: _i6.Future<_i5.File>.value(_FakeFile_4(
          this,
          Invocation.method(
            #writeAsString,
            [contents],
            {
              #mode: mode,
              #encoding: encoding,
              #flush: flush,
            },
          ),
        )),
      ) as _i6.Future<_i5.File>);

  @override
  void writeAsStringSync(
    String? contents, {
    _i5.FileMode? mode = _i5.FileMode.write,
    _i7.Encoding? encoding = const _i7.Utf8Codec(),
    bool? flush = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAsStringSync,
          [contents],
          {
            #mode: mode,
            #encoding: encoding,
            #flush: flush,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<bool> exists() => (super.noSuchMethod(
        Invocation.method(
          #exists,
          [],
        ),
        returnValue: _i6.Future<bool>.value(false),
      ) as _i6.Future<bool>);

  @override
  bool existsSync() => (super.noSuchMethod(
        Invocation.method(
          #existsSync,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i6.Future<String> resolveSymbolicLinks() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinks,
          [],
        ),
        returnValue: _i6.Future<String>.value(_i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinks,
            [],
          ),
        )),
      ) as _i6.Future<String>);

  @override
  String resolveSymbolicLinksSync() => (super.noSuchMethod(
        Invocation.method(
          #resolveSymbolicLinksSync,
          [],
        ),
        returnValue: _i8.dummyValue<String>(
          this,
          Invocation.method(
            #resolveSymbolicLinksSync,
            [],
          ),
        ),
      ) as String);

  @override
  _i6.Future<_i5.FileStat> stat() => (super.noSuchMethod(
        Invocation.method(
          #stat,
          [],
        ),
        returnValue: _i6.Future<_i5.FileStat>.value(_FakeFileStat_11(
          this,
          Invocation.method(
            #stat,
            [],
          ),
        )),
      ) as _i6.Future<_i5.FileStat>);

  @override
  _i5.FileStat statSync() => (super.noSuchMethod(
        Invocation.method(
          #statSync,
          [],
        ),
        returnValue: _FakeFileStat_11(
          this,
          Invocation.method(
            #statSync,
            [],
          ),
        ),
      ) as _i5.FileStat);

  @override
  _i6.Stream<_i5.FileSystemEvent> watch({
    int? events = 15,
    bool? recursive = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watch,
          [],
          {
            #events: events,
            #recursive: recursive,
          },
        ),
        returnValue: _i6.Stream<_i5.FileSystemEvent>.empty(),
      ) as _i6.Stream<_i5.FileSystemEvent>);
}
